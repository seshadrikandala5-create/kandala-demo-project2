name: Build and Deploy to EC2 from S3

on:
  push:
    branches: [main]

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Upload to GitHub Actions Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1  # or your region

      - name: Upload JAR to S3
        run: |
             aws s3 cp target/*.jar s3://${{ env.S3_BUCKET }}/${{ env.S3_JAR_PATH }}/${{ env.JAR_NAME }}

      - name: Decode PEM key and prepare for SSH
        run: |
            echo "${{ secrets.EC2_PEM_KEY_B64 }}" | base64 -d > kandala-demo-java.pem
            chmod 400 kandala-demo-java.pem

      - name: SSH into EC2 and deploy using Docker
        run: |
             ssh -o StrictHostKeyChecking=no -i kandala-demo-java.pem ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
             sudo yum update -y
             sudo yum install docker -y
             sudo service docker start
             sudo usermod -a -G docker ec2-user
             newgrp docker
             mkdir -p /home/ec2-user/app
             cd /home/ec2-user/app
             aws s3 cp s3://${{ env.S3_BUCKET }}/jar/${{ env.JAR_NAME }} .
             docker stop java-app || true
             docker rm java-app || true
             docker run -d --name java-app -p 8080:8080 openjdk:17 java -jar ${{ env.JAR_NAME }}
             EOF
